generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  username              String                 @unique
  emailVerified         DateTime               @default(now())
  image                 Json?
  password              String
  address               String
  phone                 String                 @default("")
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  travels      Travel[]
  reservations Reservation[]
  payments     Payment[]
  history      ReservationHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Travel {
  id               String   @id @default(cuid())
  name             String
  departDate       DateTime
  arriveDate       DateTime
  duration         String
  meccahMadinaDays String
  availabelSpots   String
  description      String   @db.Text
  ref              String
  departTime       String
  arriveTime       String
  arrivePlace      String
  leavePlace       String
  airline          String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
  hotels       Hotel[]
  prices       TravelPrices[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TravelPrices {
  id         String @id @default(cuid())
  double     String
  triple     String
  quadruple  String
  quintuple  String
  child      String
  babe       String
  commission String
  food       String

  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  travelId String
  travel   Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum HotelLocation {
  MECCAH
  MADINA
}

model Hotel {
  id       String        @id @default(cuid())
  name     String
  location HotelLocation

  travels            Travel[]
  meccahReservations ReservationRoom[] @relation(name: "meccahHotel")
  madinaReservations ReservationRoom[] @relation(name: "madinaHotel")
  TravelPrices       TravelPrices[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ReservationPaymentStatus {
  PENDING
  COMPLETED
}

model Reservation {
  id            String                   @id @default(cuid())
  ref           String                   @unique
  status        ReservationStatus        @default(PENDING)
  paymentStatus ReservationPaymentStatus @default(PENDING)

  travelId String
  travel   Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservationRooms ReservationRoom[]
  payments         Payment[]
  history          ReservationHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReservationHistoryType {
  PAYMENT
  STATUS
  DATA
}

model ReservationHistory {
  id        String                 @id @default(cuid())
  type      ReservationHistoryType
  amount    String?
  oldStatus ReservationStatus?
  newStatus ReservationStatus?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservationId String
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoomType {
  DOUBLE
  TRIPLE
  QUADRUPLE
  QUINTUPLE
  COLLECTIVE
}

model ReservationRoom {
  id       String   @id @default(cuid())
  roomType RoomType

  meccahHotelId String
  meccahHotel   Hotel  @relation(fields: [meccahHotelId], references: [id], onDelete: Cascade, name: "meccahHotel")

  madinaHotelId String?
  madinaHotel   Hotel?  @relation(fields: [madinaHotelId], references: [id], onDelete: Cascade, name: "madinaHotel")

  reservationMembers ReservationMember[]

  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberType {
  ADULT
  CHILD
  BABY
}

model ReservationMember {
  id                 String     @id @default(cuid())
  name               String
  sex                String     @default("ذكر")
  type               MemberType
  dob                DateTime
  passportNumber     String
  passportExpiryDate DateTime
  passport           Json
  foodIclusions      Boolean    @default(false)

  reservationRoomId String
  reservationRoom   ReservationRoom @relation(fields: [reservationRoomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String @id @default(cuid())
  amount     String
  paymentRef String @unique

  reservationRef String
  reservation    Reservation @relation(fields: [reservationRef], references: [ref], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
